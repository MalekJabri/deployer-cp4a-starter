# I have to include this to use workspaces
# Workspaces can only be propagated to embedded task specs, not referenced Tasks.
# https://tekton.dev/docs/pipelines/taskruns/#propagating-workspaces-to-referenced-tasks
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: openshift-client
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/categories: Openshift
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: cli
    tekton.dev/displayName: "openshift client"
    tekton.dev/platforms: "linux/amd64"
spec:
  description: >-
    This task runs commands against the cluster where the task run is
    being executed.
    OpenShift is a Kubernetes distribution from Red Hat which provides oc,
    the OpenShift CLI that complements kubectl for simplifying deployment
    and configuration applications on OpenShift.
  params:
    - name: SCRIPT
      description: The OpenShift CLI arguments to run
      type: string
      default: "oc $@"
    - name: ARGS
      description: The OpenShift CLI arguments to run
      type: array
      default:
        - "help"
    - name: VERSION
      description: The OpenShift Version to use
      type: string
      default: "4.10"
  resources:
    inputs:
      - name: source
        type: git
        optional: true
  results:
    - name: oc-output
      description: The output of the oc command
  steps:
    - name: oc
      image: quay.io/openshift/origin-cli:$(params.VERSION)
      script: "$(params.SCRIPT)"
      args:
        - "$(params.ARGS)"
  workspaces:
    - name: oc-workspace
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: createjsonfile
spec:
  results:
    - name: createjsonfile
  steps:
    - name: get-marketplace-yaml
      image: alpine
      script: |
        touch $(workspaces.task-ws.path)/dockerconfig.json
        echo "JSON File created"
  workspaces:
    - name: task-ws
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: ibmcloud-secrets-manager-get
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/categories: IBM Cloud
    tekton.dev/pipelines.minVersion: "0.17.0"
    tekton.dev/tags: cli
    tekton.dev/displayName: "IBM Cloud Secrets Manager Get Secret"
    tekton.dev/platforms: "linux/amd64"
spec:
  description: >-
    This task retrieves a secret from IBM Cloud Secrets Manager using a key ID
  params:
    - name: KEY_ID
      description: An IBM Cloud Secrets Manager key ID
      type: string
      default: 968d7819-f2c5-7b67-c420-3c6bfd51521e
    - name: SECRETS_MANAGER_ENDPOINT_URL
      description: An IBM Cloud Secrets Manager instance endpoint URL (https://cloud.ibm.com/apidocs/secrets-manager/secrets-manager-v2#endpoints)
      type: string
      default: https://{instance_ID}.us-south.secrets-manager.appdomain.cloud
  results:
    - name: secret-value
      description: A secret value retrieved using the provided KEY_ID
  steps:
    - name: retrieve-key
      image: quay.io/openshift/origin-cli:4.10
      script: |
        #!/usr/bin/env bash

        # Retrives the IBM Cloud API Key configured in a `deployer` cluster
        export IBMCLOUD_API_KEY=$(oc get secret ibm-secret -n kube-system -o jsonpath='{.data.apiKey}' | base64 -d)
        export AUTH_RESPONSE_JSON=$(curl -s -X POST \
          "https://iam.cloud.ibm.com/identity/token" \
          --header 'Content-Type: application/x-www-form-urlencoded' \
          --header 'Accept: application/json' \
          --data-urlencode 'grant_type=urn:ibm:params:oauth:grant-type:apikey' \
          --data-urlencode "apikey=${IBMCLOUD_API_KEY}")
        export ACCESS_TOKEN=$(echo $AUTH_RESPONSE_JSON | grep -o '"access_token":"[^"]*' | grep -o '[^"]*$')
        export SECRET_JSON=$(curl -s -X GET --location --header "Authorization: Bearer ${ACCESS_TOKEN}" --header "Accept: application/json" "$(params.SECRETS_MANAGER_ENDPOINT_URL)/api/v2/secrets/$(params.KEY_ID)")
        export SECRET=$(echo $SECRET_JSON |  grep -o '"payload":"[^"]*' | grep -o '[^"]*$')
        echo $SECRET | tee $(results.secret-value.path)
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: get-cp4ba-yaml-task
spec:
  results:
    - name: CP4BAyamlFile
  params:
    - name: CP4BA-VERSION
      description: Enter your CP4BA version
      type: string
  steps:
    - name: get-marketplace-yaml
      image: alpine/curl
      script: |
        wget https://github.com/mikefarah/yq/releases/download/v4.33.3/yq_linux_amd64.tar.gz -O - | tar xz && mv yq_linux_amd64 /usr/bin/yq
        echo $(yq --version)
        curl -s https://raw.githubusercontent.com/IBM/cloud-pak/master/repo/case/ibm-cp-automation/index.yaml > cp-index.yaml
        version=$(yq eval '.versions | with_entries(select(.value.appVersion == "22.0.2-IF004")) | keys' cp-index.yaml)

        # trim the whitespace
        version=$(echo "$version" | tr -d '-')
        version="${version#"${version%%[![:space:]]*}"}"
        version="${version%"${version##*[![:space:]]}"}"
        echo "$version"

        curl -L -O "https://github.com/IBM/cloud-pak/raw/master/repo/case/ibm-cp-automation/$version/ibm-cp-automation-$version.tgz"

        tar -xvzf "ibm-cp-automation-$version.tgz"

        currentDir=$(pwd)
        fileName=$(ls -p $currentDir/ibm-cp-automation/inventory/cp4aOperatorSdk/files/deploy/crs | grep -v /)

        tar -xvf $currentDir/ibm-cp-automation/inventory/cp4aOperatorSdk/files/deploy/crs/$fileName

        cp $currentDir/cert-kubernetes/descriptors/op-olm/catalog_source.yaml $(workspaces.task-ws.path)/catalog_source.yaml
        cat $(workspaces.task-ws.path)/catalog_source.yaml

  workspaces:
    - name: task-ws
---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: cp4ba-deploy
  namespace: default
spec:
  params:
    - name: CP4BA-VERSION
      type: string
      default: "22.0.2"
    - name: namespace
      type: string
      default: "default"
  tasks:
    - name: get-sources
      taskRef:
        name: git-clone
        kind: ClusterTask
      workspaces:
      - name: output
        workspace: ws
      params:
        - name: url
          value: https://github.com/cloud-native-toolkit/deployer-cp4a-starter-sources.git
        - name: revision
          value: main
        - name: subdirectory
          value: sources
    - name: add-namespace
      taskRef:
        name: openshift-client
      runAfter:
        - get-sources
      params:
        - name: ARGS
          value: [$(params.namespace)]
        - name: VERSION
          value: "4.10"
        - name: SCRIPT
          value: |
            #!/usr/bin/env bash
            yaml_file=$(workspaces.oc-workspace.path)/sources/namespace.yaml
            wget https://github.com/mikefarah/yq/releases/download/v4.33.3/yq_linux_amd64.tar.gz -O - | tar xz && mv yq_linux_amd64 /usr/bin/yq
            yq -e '.metadata.name = "$(params.namespace)"' -i $yaml_file
            # Read the content of the YAML file and save it to a variable
            yaml_content=$(cat "$yaml_file")
            # Print the content to verify
            echo "$yaml_content" | oc apply -f -
      workspaces:
        - name: oc-workspace
          workspace: ws
    - name: add-operator-group
      taskRef:
        name: openshift-client
      runAfter:
        - add-namespace
      params:
        - name: ARGS
          value: [$(params.namespace)]
        - name: VERSION
          value: "4.10"
        - name: SCRIPT
          value: |
            #!/usr/bin/env bash
            # Read the content of the YAML file and save it to a variable
            yaml_file=$(workspaces.oc-workspace.path)/sources/operator_group.yaml
            wget https://github.com/mikefarah/yq/releases/download/v4.33.3/yq_linux_amd64.tar.gz -O - | tar xz && mv yq_linux_amd64 /usr/bin/yq
            yq -e '.metadata.namespace = "$(params.namespace)"' -i $yaml_file
            yq -e '.spec.targetNamespaces[0]="$(params.namespace)"' -i $yaml_file
            yaml_content=$(cat "$yaml_file")
            # Print the content to verify
            echo "$yaml_content" | oc apply -f -
      workspaces:
        - name: oc-workspace
          workspace: ws
    - name: create-json-file
      taskRef:
        name: createjsonfile
      runAfter:
        - add-operator-group
      workspaces:
        - name: task-ws
          workspace: ws
    - name: copy-pull-secret
      taskRef:
        name: openshift-client
      runAfter:
        - create-json-file
      params:
        - name: ARGS
          value: [$(workspaces.oc-workspace.path)/dockerconfig.json]
        - name: VERSION
          value: "4.10"
        - name: SCRIPT
          value: |
            oc get secret/pull-secret -n openshift-config --template='{{index .data ".dockerconfigjson" | base64decode}}' > $1
      workspaces:
        - name: oc-workspace
          workspace: ws
    - name: get-ibm-entitlement-key
      taskRef:
        kind: Task
        name: ibmcloud-secrets-manager-get
      runAfter:
        - create-json-file
      params:
        - name: KEY_ID
          value: 968d7819-f2c5-7b67-c420-3c6bfd51521e
        - name: SECRETS_MANAGER_ENDPOINT_URL
          value: >-
            https://afa20521-cd75-4864-843f-e59fd0ffd49d.us-south.secrets-manager.appdomain.cloud
    - name: update-pull-secret
      taskRef:
        name: openshift-client
      runAfter:
        - get-ibm-entitlement-key
        - copy-pull-secret
      params:
        - name: ARGS
          value: [
            $(tasks.get-ibm-entitlement-key.results.secret-value),
            $(workspaces.oc-workspace.path)/dockerconfig.json
          ]
        - name: VERSION
          value: "4.10"
        - name: SCRIPT
          value: |
            oc registry login --registry="cp.icr.io" --auth-basic="cp:$1" --to=$2
      workspaces:
        - name: oc-workspace
          workspace: ws
    - name: install-entitlement-key
      taskRef:
        name: openshift-client
      runAfter:
        - update-pull-secret
      params:
        - name: ARGS
          value: [
             $(workspaces.oc-workspace.path)/dockerconfig.json
          ]
        - name: VERSION
          value: "4.10"
        - name: SCRIPT
          value: |
            oc set data secret/pull-secret -n openshift-config --from-file=.dockerconfigjson=$1 
      workspaces:
        - name: oc-workspace
          workspace: ws
    - name: get-cp4ba-yaml
      taskRef:
        name:  get-cp4ba-yaml-task
      runAfter:
        - install-entitlement-key
      params:
        - name: CP4BA-VERSION
          value: $(params.CP4BA-VERSION)
      workspaces:
        - name: task-ws
          workspace: ws
    - name: add-cp4ba-to-marketplace
      taskRef:
        name: openshift-client
      runAfter:
        - get-cp4ba-yaml
      params:
        - name: ARGS
          value: [$(params.CP4BA-VERSION)]
        - name: VERSION
          value: "4.10"
        - name: SCRIPT
          value: |
            #!/usr/bin/env bash
            yaml_file=$(workspaces.oc-workspace.path)/catalog_source.yaml 
            yaml_content=$(cat "$yaml_file") 
            echo "$yaml_content"
            oc apply -f $(workspaces.oc-workspace.path)/catalog_source.yaml 
      workspaces:
        - name: oc-workspace
          workspace: ws
    - name: install-cp4ba-operator
      taskRef:
        name: openshift-client
      runAfter:
        - add-cp4ba-to-marketplace
      params:
        - name: ARGS
          value: [$(params.CP4BA-VERSION)]
        - name: VERSION
          value: "4.10"
        - name: SCRIPT
          value: |
            #!/usr/bin/env bash
            # Read the content of the YAML file and save it to a variable
            wget https://github.com/mikefarah/yq/releases/download/v4.33.3/yq_linux_amd64.tar.gz -O - | tar xz && mv yq_linux_amd64 /usr/bin/yq
            decimal=$(params.CP4BA-VERSION)

            # Extract major and minor versions
            major=$(echo "$decimal" | cut -d '.' -f 1)
            minor=$(echo "$decimal" | cut -d '.' -f 3)

            # Format into "v<major>.<minor>"
            channel="v${major}.${minor}"
            echo "$channel"
            yaml_file=$(workspaces.oc-workspace.path)/sources/subscription.yaml
            yq eval ".spec.channel = \"$channel\"" -i $yaml_file
            yaml_content=$(cat "$yaml_file")
            echo "$yaml_content"
            # Print the content to verify
            echo "$yaml_content" | oc apply -f -
      workspaces:
        - name: oc-workspace
          workspace: ws
    - name: wait-for-operator
      runAfter:
        - install-cp4ba-operator
      taskRef:
        name: openshift-client
      params:
        - name: ARGS
          value: [$(params.namespace)]
        - name: VERSION
          value: "4.10"
        - name: SCRIPT
          value: |
            #!/usr/bin/env bash
            bash $(workspaces.oc-workspace.path)/sources/wait-for-operator.sh
      workspaces:
        - name: oc-workspace
          workspace: ws
    - name: install-cp4ba
      taskRef:
        name: openshift-client
      runAfter:
        - wait-for-operator
      params:
        - name: ARGS
          value: [$(params.namespace, params.CP4BA-VERSION)]
        - name: VERSION
          value: "4.10"
        - name: SCRIPT
          value: |
            #!/usr/bin/env bash
            # Read the content of the YAML file and save it to a variable
            yaml_file=$(workspaces.oc-workspace.path)/sources/cp4ba.yaml
            wget https://github.com/mikefarah/yq/releases/download/v4.33.3/yq_linux_amd64.tar.gz -O - | tar xz && mv yq_linux_amd64 /usr/bin/yq
            yq -e '.metadata.namespace = "$(params.namespace)"' -i $yaml_file
            yq -e '.spec.appVersion = "$(params.CP4BA-VERSION)"' -i $yaml_file
            yaml_content=$(cat "$yaml_file")
            echo "$yaml_content"
            # Print the content to verify
            echo "$yaml_content" | oc apply -f -
      workspaces:
        - name: oc-workspace
          workspace: ws
  workspaces:
    - name: ws          